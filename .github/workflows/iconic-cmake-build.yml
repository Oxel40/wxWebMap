name: I-CONIC CMake Build

on:
  workflow_dispatch:
    inputs:
      artifact-name:
        description: 'The name to upload the build artifacts under'
        default: 'build-artifact'
        required: false
        type: string
      
  workflow_call:
    inputs:
      artifact-name:
        description: 'The name to upload the build artifacts under'
        default: 'build-artifact'
        required: false
        type: string

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }} # we run many different builds
    strategy:
      max-parallel: 4
      matrix:
        os: [windows-latest] #, ubuntu-latest]
        target: [debug, release]
    steps:      
      - name: Get preset name
        id: preset-name
        run: echo "name=$( echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]' )-x64-${{ matrix.target }}" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Install external dependencies (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get install libdbus-1-dev libxi-dev libxtst-dev libxrandr-dev
        
      - name: Checkout repository
        uses: actions/checkout@v2.5.0
        with:
          submodules: true

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v10
        #with:
          # Run vcpkg now to ensure that --clean-after-build is used (https://github.com/lukka/run-vcpkg/blob/main/action.yml)
          #runVcpkgInstall: true

      - name: Run CMake consuming CMakePreset.json and vcpkg.json by mean of vcpkg.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ steps.preset-name.outputs.name }}
          buildPreset: ${{ steps.preset-name.outputs.name }}
        
      - name: List build artifacts
        run: ls "${{ github.workspace }}\out\build\${{ steps.preset-name.outputs.name }}\lib" "${{ github.workspace }}\out\build\${{ steps.preset-name.outputs.name }}\bin"
        shell: bash
      
      - name: Zip build artifacts (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: zip -r "${{ matrix.os }}-${{ matrix.target }}.zip" "./out/build/${{ steps.preset-name.outputs.name }}/lib" "./out/build/${{ steps.preset-name.outputs.name }}/bin"

      - name: Zip build artifacts (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: Compress-Archive -Path "${{ github.workspace }}\out\build\${{ steps.preset-name.outputs.name }}\lib", "${{ github.workspace }}\out\build\${{ steps.preset-name.outputs.name }}\bin" -DestinationPath "${{ github.workspace }}\${{ matrix.os }}-${{ matrix.target }}.zip"
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          # GitHub semingly can't decide which variable to put the input arguments into
          name: ${{ github.event.inputs.artifact-name }}${{ inputs.artifact-name }}
          path: ${{ matrix.os }}-${{ matrix.target }}.zip
          if-no-files-found: error 

    env:
      CMAKE_TOOLCHAIN_FILE: "${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
      VCPKG_ENABLE_METRICS: 0
      #VCPKG_DEFAULT_BINARY_CACHE: "${{ github.workspace }}/out/vcpkg-cache"
      # Don't know if this works but it's needed for bigger project to not eat up all space
      #VCPKG_INSTALL_OPTIONS: "--clear-after-build"

    #  [OPTIONAL] Define the vcpkg's triplet you want to enforce, otherwise the default one
    #  for the hosting system will be automatically choosen (x64 is the default on all 
    #  platforms, e.g. `x64-osx`).
    #  VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
